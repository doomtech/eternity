// EDF for Eternity Engine v3.35.00
//  This file contains sound definitions. Note that some fields in the
//  sound block have very special semantics, so you should read the docs
//  before you mess with this at all. Confusion is bound to result otherwise.


// Include gamemode-specific sounds --------------------------------------------

// Doom : DeHackEd nums 1 - 108, 125

includeifenabled("doom/sounds.edf", "DOOM")

// Heretic : DeHackEd nums 300 - 397

includeifenabled("heretic/sounds.edf", "HERETIC")

// MBF sounds ------------------------------------------------------------------

# killough 11/98: dog sounds

sound dgsit  { pitchvariance = Doom; priority =  98; dehackednum = 109 }
sound dgatk  { pitchvariance = Doom; priority =  70; dehackednum = 110 }
sound dgact  { pitchvariance = Doom; priority = 120; dehackednum = 111 }
sound dgdth  { pitchvariance = Doom; priority =  70; dehackednum = 112 }
sound dgpain { pitchvariance = Doom; priority =  96; dehackednum = 113 }

// Eternity Engine sounds ------------------------------------------------------

sound eefly
{
   priority = 120
   dehackednum = 114
   clipping_dist = 512
   close_dist = 64
}

sound gloop  { pitchvariance = Doom; priority =  100; dehackednum = 115 }
sound thundr { pitchvariance = Doom; priority =  96;  dehackednum = 116 }
sound muck   { pitchvariance = Doom; priority =  100; dehackednum = 117 }

sound plfeet
{
   pitchvariance = Doom
   priority = 96
   dehackednum = 118
   singularity = sg_oof
   skinindex = sk_plfeet
}

sound plfall
{
   pitchvariance = Doom
   priority = 96
   dehackednum = 119
   skinindex = sk_plfall
}

sound fallht
{
   pitchvariance = Doom
   priority = 96;
   dehackednum = 120
   skinindex = sk_fallht
}

sound burn { pitchvariance = Doom; priority =  32; dehackednum = 121 }

sound eehtsz
{ 
   pitchvariance = Doom
   priority = 100
   dehackednum = 122
   clipping_dist = 640
   close_dist = 96
}

sound eedrip
{
   pitchvariance = Doom
   priority = 100
   dehackednum = 123
   clipping_dist = 640
   close_dist = 96
}

sound Earthquake
{
   lump = "quake2";
   dehackednum = 124
}

// NOTE: DeHackEd num 125 == plwdth in doom/sounds.edf

// [CG] Quake-style ("The enemy has your flag!") announcer.

sound FriendlyFlagDropped
{
    lump = "dsefd"
    clipping_dist = 1
    close_dist = 2
    priority = 0
}

sound FriendlyFlagTaken
{
    lump = "dsefg"
    clipping_dist = 1
    close_dist = 2
    priority = 0
}

sound FriendlyFlagReturned
{
    lump = "dsefr"
    clipping_dist = 1
    close_dist = 2
    priority = 0
}

sound FriendlyFlagCaptured
{
    lump = "dsffs"
    clipping_dist = 1
    close_dist = 2
    priority = 0
}

sound EnemyFlagDropped
{
    lump = "dsffd"
    clipping_dist = 1
    close_dist = 2
    priority = 0
}

sound EnemyFlagTaken
{
    lump = "dsffg"
    clipping_dist = 1
    close_dist = 2
    priority = 0
}

sound EnemyFlagReturned
{
    lump = "dsffr"
    clipping_dist = 1
    close_dist = 2
    priority = 0
}

sound EnemyFlagCaptured
{
    lump = "dsefs"
    clipping_dist = 1
    close_dist = 2
    priority = 0
}

// [CG] Unreal Tournament ("Red flag taken!") announcer.

sound BlueFlagDropped
{
    lump = "AC_BLUED"
    clipping_dist = 1
    close_dist = 2
    priority = 0
}

sound RedFlagDropped
{
    lump = "AC_REDD"
    clipping_dist = 1
    close_dist = 2
    priority = 0
}

sound BlueFlagReturned
{
    lump = "AC_BLUER"
    clipping_dist = 1
    close_dist = 2
    priority = 0
}

sound RedFlagReturned
{
    lump = "AC_REDR"
    clipping_dist = 1
    close_dist = 2
    priority = 0
}

sound BlueFlagTaken
{
    lump = "AC_BLUET"
    clipping_dist = 1
    close_dist = 2
    priority = 0
}

sound RedFlagTaken
{
    lump = "AC_REDT"
    clipping_dist = 1
    close_dist = 2
    priority = 0
}

sound BlueTeamScores
{
    lump = "AC_BLUES"
    clipping_dist = 1
    close_dist = 2
    priority = 0
}

sound RedTeamScores
{
    lump = "AC_REDS"
    clipping_dist = 1
    close_dist = 2
    priority = 0
}

sound TeamAssist
{
    lump = "AC_ASSIS"
    clipping_dist = 1
    close_dist = 2
    priority = 0
}

// [CG] Generic announcer sounds

sound RoundStarting
{
    lump = "AC_PREP"
    clipping_dist = 1
    close_dist = 2
    priority = 0
}

sound RoundStart
{
    lump = "AC_FIGHT"
    clipping_dist = 1
    close_dist = 2
    priority = 0
}

sound ThreeFragsLeft
{
    lump = "AC_FRAG3"
    clipping_dist = 1
    close_dist = 2
    priority = 0
}

sound TwoFragsLeft
{
    lump = "AC_FRAG2"
    clipping_dist = 1
    close_dist = 2
    priority = 0
}

sound OneFragLeft
{
    lump = "AC_FRAG1"
    clipping_dist = 1
    close_dist = 2
    priority = 0
}

sound TeamKillOne
{
    lump = "AC_FRAT1"
    clipping_dist = 1
    close_dist = 2
    priority = 0
}

sound TeamKillTwo
{
    lump = "AC_FRAT2"
    clipping_dist = 1
    close_dist = 2
    priority = 0
}

sound TeamKillThree
{
    lump = "AC_FRAT3"
    clipping_dist = 1
    close_dist = 2
    priority = 0
}

sound SuicideDeathOne
{
    lump = "AC_SUI1"
    clipping_dist = 1
    close_dist = 2
    priority = 0
}

sound SuicideDeathTwo
{
    lump = "AC_SUI2"
    clipping_dist = 1
    close_dist = 2
    priority = 0
}

sound SuicideDeathThree
{
    lump = "AC_SUI3"
    clipping_dist = 1
    close_dist = 2
    priority = 0
}

sound BlowoutWin
{
    lump = "AC_HOLYS"
    clipping_dist = 1
    close_dist = 2
    priority = 0
}

sound HumiliatingWin
{
    lump = "AC_HUMIL"
    clipping_dist = 1
    close_dist = 2
    priority = 0
}

sound ImpressiveWin
{
    lump = "AC_IMPRE"
    clipping_dist = 1
    close_dist = 2
    priority = 0
}

sound LeadGained
{
    lump = "AC_LEADG"
    clipping_dist = 1
    close_dist = 2
    priority = 0
}

sound LeadLost
{
    lump = "AC_LEADL"
    clipping_dist = 1
    close_dist = 2
    priority = 0
}

sound LeadTied
{
    lump = "AC_LEADT"
    clipping_dist = 1
    close_dist = 2
    priority = 0
}

sound RoundLost
{
    lump = "AC_LOSE"
    clipping_dist = 1
    close_dist = 2
    priority = 0
}

sound RoundTied
{
    lump = "AC_TIE"
    clipping_dist = 1
    close_dist = 2
    priority = 0
}

sound RoundWon
{
    lump = "AC_WIN"
    clipping_dist = 1
    close_dist = 2
    priority = 0
}

sound OneMinuteWarning
{
    lump = "AC_MIN1"
    clipping_dist = 1
    close_dist = 2
    priority = 0
}

sound FiveMinuteWarning
{
    lump = "AC_MIN5"
    clipping_dist = 1
    close_dist = 2
    priority = 0
}

sound DoubleKill
{
    lump = "AC_MULT2"
    clipping_dist = 1
    close_dist = 2
    priority = 0
}

sound MultiKill
{
    lump = "AC_MULT3"
    clipping_dist = 1
    close_dist = 2
    priority = 0
}

sound UltraKill
{
    lump = "AC_MULT4"
    clipping_dist = 1
    close_dist = 2
    priority = 0
}

sound MonsterKill
{
    lump = "AC_MULT5"
    clipping_dist = 1
    close_dist = 2
    priority = 0
}

sound KillingSpree
{
    lump = "AC_SPRE1"
    clipping_dist = 1
    close_dist = 2
    priority = 0
}

sound RampageSpree
{
    lump = "AC_SPRE2"
    clipping_dist = 1
    close_dist = 2
    priority = 0
}

sound DominatingSpree
{
    lump = "AC_SPRE3"
    clipping_dist = 1
    close_dist = 2
    priority = 0
}

sound UnstoppableSpree
{
    lump = "AC_SPRE4"
    clipping_dist = 1
    close_dist = 2
    priority = 0
}

sound GodLikeSpree
{
    lump = "AC_SPRE5"
    clipping_dist = 1
    close_dist = 2
    priority = 0
}

sound WickedSickSpree
{
    lump = "AC_SPRE6"
    clipping_dist = 1
    close_dist = 2
    priority = 0
}

// Default Sector Sound Sequences ----------------------------------------------

// Door Opening Sequences

soundsequence EEDoorOpenNormal
{
   commands
   @"
      play EE_DoorOpen
      nostopcutoff
   "@
}

soundsequence EEDoorOpenBlazing
{
   commands
   @"
      play EE_BDoorOpen
      nostopcutoff
   "@
}

// Note: All gamemode sequences will be kept here since they are related.

// DOOM Door Close Sequences

ifgametype(DOOM)

soundsequence EEDoorCloseNormal
{
   commands
   @"
      play EE_DoorClose
      nostopcutoff
   "@
}

soundsequence EEDoorCloseBlazing
{
   commands
   @"
      play EE_BDoorClose
      nostopcutoff
   "@
}

// Note: This sequence is only used in DOOM when comp_blazing is enabled.
// It makes the (apparently) erroneous double-closing sound.

soundsequence EEDoorCloseBlazingComp
{
   commands
   @"
      play EE_BDoorClose
      stopsound EE_BDoorClose
   "@
}

endif()

// Heretic Door Close Sequences

ifgametype(HERETIC)

soundsequence EEDoorCloseNormal
{
   commands
   @"
      play EE_DoorOpen
      stopsound EE_DoorClose
   "@
}

soundsequence EEDoorCloseBlazing
{
   commands
   @"
      play EE_BDoorOpen
      stopsound EE_BDoorClose
   "@
}

endif()

// Plat Sequences

// This is used by most plat types, like the ordinary down-wait-up-stay type
soundsequence EEPlatNormal
{
   commands
   @"
      play EE_PlatStart
      stopsound EE_PlatStop
   "@
}

// This is used by raise-and-change plat types.
soundsequence EEPlatRaise
{
   commands
   @"
      playloop EE_PlatMove 8
      stopsound EE_PlatStop
   "@
}

// This may seem pointless, but defining it allows the silent behavior of 
// instant move plats to be overridden by redefining this sequence.
soundsequence EEPlatSilent
{
}

// Ceiling Sequences

// Used by most ceiling actions
soundsequence EECeilingNormal
{
   commands
   @"
      playloop EE_FCMove 8
   "@
}

// Used by "silent" crushers that aren't really silent
soundsequence EECeilingSemiSilent
{
   commands
   @"
      stopsound EE_PlatStop
   "@
}

// Like above for plats, but for ceilings.
soundsequence EECeilingSilent
{
}

// Floor Sequences

soundsequence EEFloor
{
   commands
   @"
      playloop EE_FCMove 8
      stopsound EE_PlatStop
   "@
}

